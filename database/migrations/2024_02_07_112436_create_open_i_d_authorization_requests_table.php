<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

/**
 * Class CreateOpenIDAuthorizationRequestsTable
 *
 * This migration creates the openid_authorization_requests table to store requests to the OpenID Authorization Endpoint.
 */
class CreateOpenIDAuthorizationRequestsTable extends Migration
{
    /**
     * Run the migrations.
     *
     * @return void
     */
    public function up()
    {
        Schema::create('openid_authorization_requests', function (Blueprint $table) {
            $table->id();
            $table->string('client_id')->comment('OAuth 2.0 Client Identifier valid at the Authorization Server.');
            $table->string('response_type')->comment('Must be set to code.');
            $table->string('scope')->comment('Indicates the attributes being requested.');
            $table->string('redirect_uri')->comment('Indicates a valid endpoint where the client will receive the authentication response.');
            $table->string('state')->comment('Unguessable random string generated by the RP, used to protect against CSRF attacks.');
            $table->string('nonce')->comment('Unguessable random string generated by the client, used to protect against CSRF attacks.');
            $table->string('vtr')->nullable()->comment('Optional. Must be set to a value as described in Vectors of Trust.');
            $table->text('acr_values')->nullable()->comment('Optional. Lists the acceptable LoAs for this authentication.');
            $table->string('code_challenge')->nullable()->comment('Optional. If the PKCE protocol is being used by the client.');
            $table->string('code_challenge_method')->nullable()->comment('Optional. If the PKCE protocol is being used by the client.');
            $table->timestamps();
        });
    }

    /**
     * Reverse the migrations.
     *
     * @return void
     */
    public function down()
    {
        Schema::dropIfExists('openid_authorization_requests');
    }
}
